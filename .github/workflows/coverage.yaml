name: Coverage

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y install ninja-build llvm llvm-dev

      - name: Install Conan
        run: pip install conan

      - name: Conan version
        run: conan --version

      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan2/p/
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conan.lock') }}

      - name: Setup default profile
        run: conan profile detect

      - name: Install profiles
        run: conan config install https://github.com/ooonak/conanconf.git -t git --args="-b main" -sf=profiles -tf=profiles

      - name: Install
        run: conan install . -pr x86_64-clang-18-coverage --build=missing

      - name: Build
        run: conan build . -pr x86_64-clang-18-coverage

      - name: Run Tests with Coverage
        run: |
          LLVM_PROFILE_FILE="coverage.profraw" ./build/Debug/tests/clrppTests
          llvm-profdata merge -sparse coverage.profraw -o coverage.profdata
          llvm-cov report ./build/Debug/tests/clrppTests -instr-profile=coverage.profdata -use-color > coverage.txt

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.txt

      - name: Extract Coverage Percentage
        run: |
          COVERAGE=$(grep -o 'TOTAL.*[0-9]\{1,3\}\.[0-9]\{2\}%' coverage.txt | awk '{print $NF}' | tr -d '%' || echo "0.00")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "$COVERAGE" > coverage_badge.json

      - name: Generate Coverage Badge
        run: |
          MAX_RETRIES=3
          RETRY_DELAY=5
          for ((i=1; i<=MAX_RETRIES; i++)); do
            curl -X POST -H "Content-Type: application/json" \
            -d '{"schemaVersion":1, "label":"coverage", "message":"'"${{ env.COVERAGE }}"'%", "color":"green"}' \
            https://badgen.net/endpoint > coverage_badge.json

            if [ -s coverage_badge.json ]; then
              echo "Badge generated successfully!"
              cat coverage_badge.json
              exit 0
            fi
            
            echo "Empty response, retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          done

          echo "Failed to generate badge after multiple attempts!"
          exit 1          
          
      - name: Upload Badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage_badge.json

      - name: Commit and Push Badge
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Fetch the latest branches
          git fetch origin

          # Checkout or create gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
            git pull origin gh-pages  # Ensure latest updates are pulled
          else
            git checkout --orphan gh-pages
          fi

          # Ensure the badge file exists before moving it
          if [ -f coverage_badge.json ]; then
            mv coverage_badge.json coverage.json
          else
            echo "Error: coverage_badge.json not found!"
            exit 1
          fi

          git add coverage.json
          git commit -m "Update coverage badge" || echo "No changes to commit"
          git push origin gh-pages
